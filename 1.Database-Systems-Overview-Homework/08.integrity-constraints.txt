Problem 8.	Database Integrity Constraints

Before one can start to implement the database tables, one must define the integrity constraints. Intergrity means something like 'be right' and consistent. The data in a database must be right and in good condition.

The most common types of constraints include:

  - UNIQUE constraints: To ensure that values in a certain column are unique
  - NOT NULL constraints: To ensure that no null values are allowed
  - PRIMARY KEY constraints: To ensure that the primary key of a table has unique value for each table row
  - FOREIGN KEY constraints: To ensure that the value in a given column is a key from another table
  - CHECK constraints: To ensure that values in a certain column meet some predefined condition
  - DROPPING Constraints: Any constraint that you have defined can be dropped using the ALTER TABLE command with the DROP CONSTRAINT option
  
Basic purposes of constraints are:

  - Data cleanliness: Constraints verify that the data in the data warehouse conforms to a basic level of data consistency and correctness, preventing the introduction of dirty data.
  - Query optimization: The Oracle Database utilizes constraints when optimizing SQL queries. Although constraints can be useful in many aspects of query optimization, constraints are particularly important for query rewrite of materialized views.
  - Enforcement: In order to use a constraint for enforcement, the constraint must be in the ENABLE state. An enabled constraint ensures that all data modifications upon a given table (or tables) satisfy the conditions of the constraints. Data modification operations which produce data that violates the constraint fail with a constraint violation error.
  - Validation: To use a constraint for validation, the constraint must be in the VALIDATE state. If the constraint is validated, then all data that currently resides in the table satisfies the constraint. Note that validation is independent of enforcement. Although the typical constraint in an operational system is both enabled and validated, any constraint could be validated but not enabled or vice versa (enabled but not validated). These latter two cases are useful for data warehouses.
  - Belief: In some cases, you will know that the conditions for a given constraint are true, so you do not need to validate or enforce the constraint. However, you may wish for the constraint to be present anyway to improve query optimization and performance. When you use a constraint in this way, it is called a belief or RELY constraint, and the constraint must be in the RELY state. The RELY state provides you with a mechanism for telling Oracle that a given constraint is believed to be true.